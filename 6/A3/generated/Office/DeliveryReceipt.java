//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `office.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Office;

public class DeliveryReceipt implements java.lang.Cloneable,
                                        java.io.Serializable
{
    public Account account;

    public long taskId;

    public DeliveryReceipt()
    {
        this.account = new Account();
    }

    public DeliveryReceipt(Account account, long taskId)
    {
        this.account = account;
        this.taskId = taskId;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DeliveryReceipt r = null;
        if(rhs instanceof DeliveryReceipt)
        {
            r = (DeliveryReceipt)rhs;
        }

        if(r != null)
        {
            if(this.account != r.account)
            {
                if(this.account == null || r.account == null || !this.account.equals(r.account))
                {
                    return false;
                }
            }
            if(this.taskId != r.taskId)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Office::DeliveryReceipt");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, account);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        return h_;
    }

    public DeliveryReceipt clone()
    {
        DeliveryReceipt c = null;
        try
        {
            c = (DeliveryReceipt)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Account.ice_write(ostr, this.account);
        ostr.writeLong(this.taskId);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.account = Account.ice_read(istr);
        this.taskId = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DeliveryReceipt v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DeliveryReceipt ice_read(com.zeroc.Ice.InputStream istr)
    {
        DeliveryReceipt v = new DeliveryReceipt();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DeliveryReceipt> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DeliveryReceipt v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DeliveryReceipt> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DeliveryReceipt.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DeliveryReceipt _nullMarshalValue = new DeliveryReceipt();

    /** @hidden */
    public static final long serialVersionUID = 2128471366296279434L;
}
